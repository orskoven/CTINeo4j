package orsk.compli.repository.neo4j;

import org.springframework.data.neo4j.repository.Neo4jRepository;
import org.springframework.data.neo4j.repository.query.Query;
import org.springframework.stereotype.Repository;
import orsk.compli.entities.neo4j.Neo4jVulnerability;

import java.util.List;

@Repository("neo4jVulnerabilityRepository")
public interface VulnerabilityNeo4jRepository extends Neo4jRepository<Neo4jVulnerability, String> {

    // Basic CRUD Operations (provided by Neo4jRepository)
    // - save(Vulnerability entity): Saves a new or updated Vulnerability.
    // - findById(String id): Finds a Vulnerability by its ID.
    // - findAll(): Retrieves all Vulnerabilities.
    // - deleteById(String id): Deletes a Vulnerability by its ID.
    // - delete(Vulnerability entity): Deletes the given Vulnerability entity.

    /**
     * Identifies high-risk products based on known exploited vulnerabilities.
     */
    @Query("""
            MATCH (v:Vulnerability)-[:AFFECTS]->(ap:AffectedProduct)
            WHERE v.severityScore > 7.0 AND v.exploited = true
            RETURN ap.name AS affectedProduct, v.cveId AS cveId, v.severityScore AS severityScore
            """)
    List<HighRiskProductProjection> findHighRiskProducts();

    interface HighRiskProductProjection {
        String getAffectedProduct();

        String getCveId();

        Double getSeverityScore();
    }

    // Other Custom Queries for Specialized Operations
    // These queries extend beyond the standard CRUD methods and add custom data retrieval operations.

    /**
     * Predicts potential threats based on historical vulnerability exploits.
     */
    @Query("""
            MATCH (gt:GlobalThreat)-[:ASSOCIATED_WITH]->(v:Vulnerability)-[:AFFECTS]->(ap:AffectedProduct)
            WHERE v.severityScore > 7 AND v.publishedDate < date()
            RETURN gt.name AS globalThreat, v.cveId AS vulnerabilityCve, ap.name AS affectedProduct
            """)
    List<PotentialThreatProjection> findPotentialThreats();

    interface PotentialThreatProjection {
        String getGlobalThreat();

        String getVulnerabilityCve();

        String getAffectedProduct();
    }

    /**
     * Cross-sector vulnerability exposure analysis.
     */
    @Query("""
            MATCH (v:Vulnerability)-[:EXPLOITED_IN]->(c:Company)-[:BELONGS_TO]->(s:Sector)
            WHERE v.severityScore > 8
            RETURN s.name AS sector, count(c) AS affectedCompanies, v.cveId AS vulnerability
            """)
    List<CrossSectorExposureProjection> findCrossSectorVulnerabilityExposure();

    interface CrossSectorExposureProjection {
        String getSector();

        Long getAffectedCompanies();

        String getVulnerability();
    }

    /**
     * Tracks the remediation status of unresolved vulnerabilities.
     */
    @Query("""
            MATCH (v:Vulnerability {status: 'Unresolved'})-[:AFFECTS]->(ap:AffectedProduct)
            WHERE v.severityScore >= 7.0
            RETURN v.cveId AS vulnerability, ap.name AS affectedProduct, v.status AS status, v.remediationDeadline AS deadline
            """)
    List<RemediationStatusProjection> findUnresolvedVulnerabilities();

    interface RemediationStatusProjection {
        String getVulnerability();

        String getAffectedProduct();

        String getStatus();

        String getDeadline();
    }

    /**
     * Sector-based vulnerability exposure analysis for affected products.
     */
    @Query("""
            MATCH (s:Sector)<-[:BELONGS_TO]-(c:Company)-[:USES]->(ap:AffectedProduct)-[:HAS]->(v:Vulnerability)
            WHERE v.severityScore >= 7.0
            RETURN s.name AS sector, count(DISTINCT ap) AS exposedProducts, count(DISTINCT v) AS criticalVulnerabilities
            """)
    List<SectorVulnerabilityExposureProjection> findSectorVulnerabilityExposure();

    interface SectorVulnerabilityExposureProjection {
        String getSector();

        Long getExposedProducts();

        Long getCriticalVulnerabilities();
    }
}
